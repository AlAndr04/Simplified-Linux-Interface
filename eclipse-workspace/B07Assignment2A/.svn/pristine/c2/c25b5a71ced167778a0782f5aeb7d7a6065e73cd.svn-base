==== A2 phase I marking ====

Group number: 0301
UTORID usernames of members: androsal, babubala, chaud349, huang472
Total deductions: -7
Grade: C

Your team's Phase II grade is based on this scale:

    http://www.artsandscience.utoronto.ca/ofr/calendar/rules.htm#grading

The way we graded is as follows: your team starts with an A+. When errors and
problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the
severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A
     A -> A-

You were asked to follow the Scrum process. A big part of that is to maintain
a product backlog and a sprint backlog. 

==== Product and Sprint backlogs ==== [up to -6] [-2 deduction]
No marks deducted for this section.

==== Java Style ==== [up to -6]

Finding lines over width 80 character -1
Traverse.java:66
Traverse.java:142
Traverse.java:162
Traverse.java:233
Pushd.java:40
Mkdir.java:81
Mkdir.java:90
Mkdir.java:108
Mkdir.java:129
Man.java:63
Man.java:110
Tree.java:39
Mkfile.java:40
Directory.java:36
Validator.java:52
Validator.java:65
Output.java:89
Output.java:97
--------------------------------------------------------------------------------
Finding lines with underscore -1
JShell.java:49
JShell.java:51
JShell.java:53
JShell.java:56
Ls.java:68
Ls.java:76
Ls.java:80
Ls.java:85
Popd.java:56
Popd.java:60
Traverse.java:192
Traverse.java:196
Traverse.java:199
Traverse.java:201
Traverse.java:207
Traverse.java:217
Traverse.java:222
Traverse.java:250
Cd.java:42
Cd.java:44
Cd.java:47
Cd.java:48
Cd.java:50
Cd.java:54
Cd.java:55
Cd.java:59
Cd.java:69
Cd.java:70
Cd.java:72
Cd.java:76
Cd.java:78
Cd.java:82
Cd.java:84
Cd.java:86
Cd.java:87
Pushd.java:40
Pushd.java:43
Pushd.java:46
Pushd.java:48
Pushd.java:51
Pushd.java:52
Pushd.java:64
Pushd.java:66
Pushd.java:67
Pushd.java:70
Mkdir.java:43
Mkdir.java:46
Mkdir.java:49
Mkdir.java:52
Mkdir.java:55
Mkdir.java:56
Mkdir.java:57
Mkdir.java:65
Mkdir.java:66
Mkdir.java:70
Mkdir.java:73
Mkdir.java:83
Mkdir.java:92
Mkdir.java:108
Mkdir.java:111
Mkdir.java:112
Mkdir.java:114
Mkdir.java:118
Mkdir.java:120
Mkdir.java:122
Mkdir.java:126
Mkdir.java:131
Mkdir.java:132
Mkdir.java:135
Mkdir.java:136
Mkdir.java:138
Pwd.java:54
Man.java:123
Man.java:125
Man.java:128
Find.java:52
Find.java:53
Find.java:56
Find.java:59
Find.java:60
Find.java:61
Find.java:62
Find.java:63
Cat.java:48
Cat.java:50
Cat.java:60
Cat.java:72
Cat.java:75
Cat.java:76
Cat.java:77
Cat.java:79
Cat.java:83
Cat.java:85
Cat.java:86
Echo.java:48
Echo.java:49
Echo.java:50
Echo.java:73
Echo.java:75
Echo.java:76
Echo.java:78
Echo.java:79
Echo.java:82
Echo.java:83
Echo.java:85
Echo.java:86
Echo.java:107
Echo.java:108
Echo.java:110
Echo.java:111
Echo.java:112
Echo.java:113
Echo.java:114
Echo.java:115
Echo.java:117
Echo.java:118
Echo.java:123
Echo.java:124
Echo.java:125
Echo.java:126
Echo.java:127
Echo.java:130
Echo.java:131
Echo.java:132
Echo.java:133
Echo.java:135
Echo.java:136
Echo.java:146
Echo.java:147
Echo.java:149
Echo.java:151
Echo.java:154
Echo.java:156
Echo.java:157
Echo.java:160
Input.java:41
Input.java:50
Input.java:57
Validator.java:43
Validator.java:45
Validator.java:47
Validator.java:49
Validator.java:59
Validator.java:60
Validator.java:73
Validator.java:74
Validator.java:75
Validator.java:76
Validator.java:77
Validator.java:79
Validator.java:82
Validator.java:85
Validator.java:88
Validator.java:90
Validator.java:91
Validator.java:94
Validator.java:95
Validator.java:115
Validator.java:119
Validator.java:121
History.java:52
History.java:53
History.java:56
History.java:58
History.java:59
History.java:60
History.java:61
History.java:64
History.java:78
History.java:79
CommandManager.java:52
CommandManager.java:54
CommandManager.java:56
CommandManager.java:58
CommandManager.java:68
CommandManager.java:69
CommandManager.java:70
CommandManager.java:72
CommandManager.java:73
CommandManager.java:74
CommandManager.java:77
CommandManager.java:78
CommandManager.java:79
CommandManager.java:82
CommandManager.java:86
CommandManager.java:87
CommandManager.java:88
CommandManager.java:89
CommandManager.java:91
CommandManager.java:92
CommandManager.java:95
CommandManager.java:96
CommandManager.java:98
CommandManager.java:100
CommandManager.java:102
CommandManager.java:104
CommandManager.java:105
CommandManager.java:108
CommandManager.java:111
CommandManager.java:114
CommandManager.java:116
CommandManager.java:119
CommandManager.java:120
CommandManager.java:133
CommandManager.java:136
CommandManager.java:140
CommandManager.java:141
CommandManager.java:142
CommandManager.java:143
CommandManager.java:144
CommandManager.java:145
CommandManager.java:146
CommandManager.java:147
CommandManager.java:148
CommandManager.java:149
CommandManager.java:150
CommandManager.java:151
CommandManager.java:152
CommandManager.java:153
CommandManager.java:154
CommandManager.java:155
CommandManager.java:159
CommandManager.java:162
CommandManager.java:164
CommandManager.java:169
CommandManager.java:176
CommandManager.java:178
CommandManager.java:180
CommandManager.java:182
CommandManager.java:184
CommandManager.java:195
CommandManager.java:197
CommandManager.java:202
CommandManager.java:205
CommandManager.java:207
CommandManager.java:208
CommandManager.java:210
CommandManager.java:213
CommandManager.java:215
CommandManager.java:217
CommandManager.java:223
Output.java:69
Output.java:72
Output.java:73
Parse.java:49
Parse.java:50
Parse.java:52
Parse.java:55
Parse.java:61
Parse.java:63
Parse.java:66

==== Design ==== [up to -6] [-4 deduction]
-public instance variables instead of setters and getters -1
*mkdir.java: 41
    
-long methods exist (more than roughly 30 lines from brace to brace) -1
*execute method in Echo is over 30 lines    

-redirection doesn't easily incorporate new commands -2
* Redirection is treated like an option for echo		
instead of an instruction for JShell on how to handle the output

==== Correctness ==== [up to -6] [-1 deduction]
-1 deducted: -1 for every 3 failed test cases.
	
1. 	history with invalid parameter
	>history -100
	
	Expected output:
	some form of error message
	
	Actual output:
	no output found
	
2.	Simple echo test
	echo "hello"
	
	Expected output:
	>hello
	
	Actual output:
	>ArrayIndexOutofBoundsException and JShell terminates

3. 	Appending using Echo
	>echo "hello world" > newfile
	>echo "hellow world again" >> newfile
	
	Expected output:
	>hello world
	>hello world again
	
	Actual output:
	>hello world hello world again
	

4.	Look for a file type but with directory name where the directory exist
	>mkdir A
	>mkdir B
	>find /A -type f -name "B"

	Expected output:
	>B: no such file (or similar message)

	Actual output:
	no output find

5.	Find file that doesn't exist 
	>mkdir /TestFolder
	>cd TestFolder
	>echo “hello world” > targetFile
	>find /TestFolder -type d -name “otherFile”

	Expected output:
	>otherFile: no such file (or similar message)

	Actual output:	
	no output find