package test.input;

import static org.junit.Assert.*;

import java.io.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import input.Output;

public class OutputTest {
	
	//set up separate streams for print testing
	private ByteArrayOutputStream output = new ByteArrayOutputStream();
	private PrintStream primaryOutput = System.out;

	@Before
	public void setUpStreams() {
	    System.setOut(new PrintStream(output));
	}

	@After
	public void restoreStreams() {
	    System.setOut(primaryOutput);
	}

	@Test
	public void testNameNotValid() {
		Output.nameNotValid("name");
		assertEquals("name" + " : A file or directory in this directory already "
	            + "has the same name.\nPlease create a new file or directory"
	            + " with a different name", output.toString());
	}

	@Test
	public void testCommandInvalid() {
		Output.commandInvalid();
		assertEquals("Command invalid please refer to the manual via man CMD", output.toString());
	}

	@Test
	public void testPathDoesNotExistError() {
		Output.pathDoesNotExistError("pathname");
		assertEquals("pathname" + ": No such file or directory", output.toString());
	}

	@Test
	public void testCommandNotFoundError() {
		Output.commandNotFoundError("command");
		assertEquals("command" + ": command not found", output.toString());
	}

	@Test
	public void testDirectoryInvalid() {
		Output.directoryInvalid();
		assertEquals("Directory given is invalid, note : Directory name convention: the only valid characters are from\n"
	            + "lowercase a to z and upper case A to Z and numbers 0 to 9.\n"
	            + "Anything other than these characters are considered invalid!", output.toString());
	}

	@Test
	public void testSpacePresentInName() {
		Output.spacePresentInName();
		assertEquals("File and Directory names should not contain a space!", output.toString());
	}

	@Test
	public void testInvalidInput() {
		Output.invalidInput();
		assertEquals("Input invalid please refer to details via man CMD", output.toString());
	}

	@Test
	public void testMustBeIntegers() {
		Output.mustBeIntegers();
		assertEquals("The input given for this command must be integer", output.toString());
	}

	@Test
	public void testPathIncorrect() {
		Output.pathIncorrect("srcname");
		assertEquals("srcname" + ": No such file or directory.", output.toString());
	}

	@Test
	public void testPrintTextToShell() {
		Output.printTextToShell("Text printed to Shell");
		assertEquals("Text printed to Shell", output.toString());
	}

	@Test
	public void testNoFilesFound() {
		Output.NoFilesFound();
		assertEquals("No files found.", output.toString());
	}

	@Test
	public void testNotDirectory() {
		Output.NotDirectory("name");
		assertEquals("name" + ": not a directory.", output.toString());
	}

}
