package test.input;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

public class OutputTest {

	@Before
	public void setUp() throws Exception {
	}

	@Test
	public void testNameNotValid() {
		System.out.println("name" + " : A file or directory in this directory already "
	            + "has the same name.\nPlease create a new file or directory"
	            + " with a different name");
		assertEquals(Output.nameNotValid("name"), outContent.toString());
	}

	@Test
	public void testCommandInvalid() {
		System.out.println("Command invalid please refer to the manual via man CMD");
		assertEquals(Output.commandInvalid(), outContent.toString());
	}

	@Test
	public void testPathDoesNotExistError() {
		System.out.println("pathname" + ": No such file or directory");
		assertEquals(Output.pathDoesNotExistError("pathname"), outContent.toString());
	}

	@Test
	public void testCommandNotFoundError() {
		System.out.println("command" + ": command not found");
		assertEquals(Output.commandNotFoundError("command"), outContent.toString());
	}

	@Test
	public void testDirectoryInvalid() {
		System.out.println("Directory given is invalid, note : Directory name convention: the only valid characters are from\n"
	            + "lowercase a to z and upper case A to Z and numbers 0 to 9.\n"
	            + "Anything other than these characters are considered invalid!");
		assertEquals(Output.directoryInvalid, outContent.toString());
	}

	@Test
	public void testSpacePresentInName() {
		System.out.println("File and Directory names should not contain a space!");
		assertEquals(Output.spacePresentInName, outContent.toString());
	}

	@Test
	public void testInvalidInput() {
		System.out.println("Input invalid please refer to details via man CMD");
		assertEquals(Output.invalidInput, outContent.toString());
	}

	@Test
	public void testMustBeIntegers() {
		System.out.println("The input given for this command must be integer");
		assertEquals(Output.invalidInput, outContent.toString());
	}

	@Test
	public void testPathIncorrect() {
		System.out.println("srcname" + ": No such file or directory.");
		assertEquals(Output.pathIncorrect("srcname"), outContent.toString());
	}

	@Test
	public void testPrintTextToShell() {
		System.out.println("Text printed to Shell");
		assertEquals(Output.printTextToShell("Text printed to Shell"), outContent.toString());
	}

	@Test
	public void testNoFilesFound() {
		System.out.println("No files found.");
		assertEquals(Output.noFilesFound, outContent.toString());
	}

	@Test
	public void testNotDirectory() {
		System.out.println("name" + ": not a directory.");
		assertEquals(Output.notDirectory("name"), outContent.toString());
	}

}
