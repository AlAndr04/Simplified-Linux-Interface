package test;

import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.Before;
import org.junit.Test;
import dirCommands.Ls;
import input.Location;

public class LsTest {
  
  private MockJShell mockJS;
  @Before
  public void setUp() throws Exception {
    mockJS = new MockJShell();
  }
  /***
   * Testing Ls when no recursive option is given and no path is given
   */
  @Test
  public void testLsNonRecursiveNoPathGiven() {
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {};
    String compString ="Dir_1\n" + 
        "Dir_2\n" + 
        "Dir_3\n" + 
        "Dir_4\n" + 
        "Dir_5";
    Ls testLs = new Ls(strArg, false, newLoc);
    assertEquals(compString,testLs.execute());
  }
  @Test
  public void testLsRecursiveNoPathGiven() {
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {};
    String compString = "/:\n" + 
        "Dir_1\n" + 
        "Dir_2\n" + 
        "Dir_3\n" + 
        "Dir_4\n" + 
        "Dir_5\n" + 
        "\n" + 
        "Dir_1:\n" + 
        "Dir_1_1\n" + 
        "file_1_1\n" + 
        "Dir_1_2\n" + 
        "\n" + 
        "Dir_1_1:\n" + 
        "\n" + 
        "\n" + 
        "file file_1_1:\n" + 
        "\n" + 
        "Dir_1_2:\n" + 
        "\n" + 
        "\n" + 
        "Dir_2:\n" + 
        "file_2_1\n" + 
        "\n" + 
        "file file_2_1:\n" + 
        "\n" + 
        "Dir_3:\n" + 
        "\n" + 
        "\n" + 
        "Dir_4:\n" + 
        "\n" + 
        "\n" + 
        "Dir_5:\n" + 
        "Dir_5_1\n" + 
        "file_5_1\n" + 
        "Dir_5_2\n" + 
        "Dir_1_2\n" + 
        "\n" + 
        "Dir_5_1:\n" + 
        "\n" + 
        "\n" + 
        "file file_5_1:\n" + 
        "\n" + 
        "Dir_5_2:\n" + 
        "\n" + 
        "\n" + 
        "Dir_1_2:\n";
    Ls testLs = new Ls(strArg, true, newLoc);
    assertEquals(compString, testLs.execute());
  }
  @Test
  public void testLsAbsolutePathGivenNonRecursive() {
    Location newLoc = mockJS.getMockLocation();
    String[] strArg = {"/Dir_1"};
    Ls testLs = new Ls(strArg, false, newLoc);
    String compString =
        "Dir_1_1\n" + 
        "file_1_1\n" + 
        "Dir_1_2";
    assertEquals(compString,testLs.execute());
  }
  @Test
  public void testLsAbsolutePathGivenRecursive() {
    Location newLoc = mockJS.getMockLocation();
    String[] strArg = {"/"};
    Ls testLs = new Ls(strArg, true, newLoc);
    String compString = "Subdirectories of /:\n" + 
        "/:\n" + 
        "Dir_1\n" + 
        "Dir_2\n" + 
        "Dir_3\n" + 
        "Dir_4\n" + 
        "Dir_5\n" + 
        "\n" + 
        "Dir_1:\n" + 
        "Dir_1_1\n" + 
        "file_1_1\n" + 
        "Dir_1_2\n" + 
        "\n" + 
        "Dir_1_1:\n" + 
        "\n" + 
        "\n" + 
        "file file_1_1:\n" + 
        "\n" + 
        "Dir_1_2:\n" + 
        "\n" + 
        "\n" + 
        "Dir_2:\n" + 
        "file_2_1\n" + 
        "\n" + 
        "file file_2_1:\n" + 
        "\n" + 
        "Dir_3:\n" + 
        "\n" + 
        "\n" + 
        "Dir_4:\n" + 
        "\n" + 
        "\n" + 
        "Dir_5:\n" + 
        "Dir_5_1\n" + 
        "file_5_1\n" + 
        "Dir_5_2\n" + 
        "Dir_1_2\n" + 
        "\n" + 
        "Dir_5_1:\n" + 
        "\n" + 
        "\n" + 
        "file file_5_1:\n" + 
        "\n" + 
        "Dir_5_2:\n" + 
        "\n" + 
        "\n" + 
        "Dir_1_2:\n";
    System.out.println(testLs.toString());
    assertEquals(compString,testLs.execute());
  }
  @Test
  public void testLsAbsolutePathGivenMultipleInputs() {
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {"/Dir_1","/Dir_2","/Dir_3"};
    String compString = "Dir_1:\n" + 
        "Dir_1_1\n" + 
        "file_1_1\n" + 
        "Dir_1_2\n" + 
        "\n" + 
        "Dir_2:\n" + 
        "file_2_1\n" + 
        "\n" + 
        "Dir_3:\n";
    Ls testLs = new Ls(strArg, false, newLoc);
    assertEquals(compString,testLs.execute());
  }
  @Test
  public void testLsAbsolutePathGivenRecursiveGivenMultipleInputs() {
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {"/Dir_1","/Dir_2","/Dir_3"};
    String compString = "Subdirectories of /Dir_1:\n" + 
        "Dir_1:\n" + 
        "Dir_1_1\n" + 
        "file_1_1\n" + 
        "Dir_1_2\n" + 
        "\n" + 
        "Dir_1_1:\n" + 
        "\n" + 
        "\n" + 
        "file file_1_1:\n" + 
        "\n" + 
        "Dir_1_2:\n" + 
        "Subdirectories of /Dir_2:\n" + 
        "Dir_2:\n" + 
        "file_2_1\n" + 
        "\n" + 
        "file file_2_1:\n" + 
        "\n" + 
        "Subdirectories of /Dir_3:\n" + 
        "Dir_3:\n";
    Ls testLs = new Ls(strArg, true, newLoc);
    assertEquals(compString,testLs.execute());
  }
  @Test
  public void testLsGivenFile() {
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {"/Dir_1/file_1_1"};
    String compString = "";
    Ls testLs = new Ls(strArg, false, newLoc);
    assertEquals(compString, testLs.execute());
  }
  @Test
  public void testLsGivenFileAndDir() {
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {"/Dir_1/file_1_1", "/Dir_1"};
    String compString = "file file_1_1:\n" + 
        "\n" + 
        "Dir_1:\n" + 
        "Dir_1_1\n" + 
        "file_1_1\n" + 
        "Dir_1_2";
    Ls testLs = new Ls(strArg, false, newLoc);
    assertEquals(compString, testLs.execute());
  }
  @Test
  public void testLsInvalidPath() {
    final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    System.setOut(new PrintStream(outContent));
    Location newLoc = new Location(mockJS.getRootDir(), null, null);
    String[] strArg = {"/dir_non_existent"};
    String compString = "/dir_non_existent: No such file or directory\n";
    Ls testLs = new Ls(strArg, false, newLoc);
    testLs.execute();
    assertEquals(compString, outContent.toString());
  }
}
