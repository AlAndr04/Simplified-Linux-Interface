package test.input;

import static org.junit.Assert.*;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import org.junit.Before;
import org.junit.Test;
import dirCommands.Cd;
import fileSystemObjects.*;



public class CdTest {
  private Cd cd;
  private MockJShell JShell;

  @Before
  public void setUp() {
    JShell = new MockJShell();
  }

  @Test
  /**
   * Test cd with invalid directory
   * @param none
   * @return none
   */
  public void testExecuteNoDirectory() {
    cd = new Cd("/Jeff", JShell.getMockLocation());
    cd.execute();
    assertEquals(JShell.getMockLocation().getRoot(),
        JShell.getMockLocation().getCurrDir());
  }

  @Test
  /**
   * Test cd with valid directory
   * @param none
   * @return none
   */
  public void testExecuteDirectoryExists() {
    cd = new Cd("/Dir_1", JShell.getMockLocation());
    cd.execute();
    assertEquals("Dir_1", JShell.getMockLocation().getCurrDir().getName());
  }

  @Test
  /**
   * Test cd with . as input
   * @param none
   * @return none
   */
  public void testExecuteDot() {
    cd = new Cd(".", JShell.getMockLocation());
    cd.execute();

    assertEquals(JShell.getMockLocation().getRoot(),
        JShell.getMockLocation().getCurrDir());
  }

  @Test
  /**
   * Test cd with .. as input, the input being valid.
   * @param none
   * @return none
   */
  public void testExecuteDoubleDotValid() {
    cd = new Cd("/Dir_1", JShell.getMockLocation());
    cd.execute();
    cd = new Cd("..", JShell.getMockLocation());
    cd.execute();
    assertEquals(JShell.getMockLocation().getRoot(),
        JShell.getMockLocation().getCurrDir());
  }

  @Test
  /**
   * Test cd with .. as input, the input being invalid, since the directory is
   * the root one.
   * @param none
   * @return none
   */
  public void testExecuteDoubleDotInvalid() {
    cd = new Cd("..", JShell.getMockLocation());
    cd.execute();
    assertEquals(JShell.getMockLocation().getRoot(),
        JShell.getMockLocation().getCurrDir());
  }

  @Test
  /**
   * Test cd through multiple directories.
   * @param none
   * @return none
   */
  public void testExecuteMultipleDirectories() {
    cd = new Cd("/Dir_1/Dir_1_1", JShell.getMockLocation());
    cd.execute();
    String actualOutput = "Dir_1_1";
    assertEquals(actualOutput, JShell.getMockLocation().getCurrDir()
        .getName());
  }

  @Test
  /**
   * Test cd into file. The current directory should not change.
   * @param none
   * @return none
   */
  public void testExecuteCdIntoFile() {
    cd = new Cd("/Dir_1/file_1_1", JShell.getMockLocation());
    cd.execute();
    assertEquals(JShell.getMockLocation().getRoot(),
        JShell.getMockLocation().getCurrDir());
  }

  @Test
  /**
   * Test cd multiple times.
   * @param none
   * @return none
   */
  public void testExecuteMultipleCds() {
    cd = new Cd("/Dir_1", JShell.getMockLocation());
    cd.execute();
    cd = new Cd("/Dir_1/Dir_1_1", JShell.getMockLocation());
    cd.execute();
    assertEquals("Dir_1_1", JShell.getMockLocation().getCurrDir().getName());
  }
}
