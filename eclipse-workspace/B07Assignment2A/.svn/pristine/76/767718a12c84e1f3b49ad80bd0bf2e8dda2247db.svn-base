package test;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import dirCommands.Tree;
import fileCommands.Echo;
import fileSystemObjects.Directory;
import input.PathIncorrectException;

public class EchoTest {
	private MockJShell mockJS;
	
	  @Before
	  public void setUp() throws Exception {
	    mockJS = new MockJShell();
	  }

	@Test
	public void testEchoPrint() {
		String [] test = {"Hey there this is my test file"};
		Echo pop = new Echo(test, mockJS.getMockLocation() );
		pop.execute();
		}
	@Test
	public void testEchoAbsolute() {
		//
		String [][] test = {{"Hey there this is my test file","  > /Dir_4/myfile.txt"},
		{"Root not given yet file created","  > Dir_3/myfile2.txt"}};
		//
		String[][] test1 = new String[][] {{"/","Dir_4","myfile.txt"},
			{"/","Dir_3","myfile2.txt"}};
		//
		String[] actualfilename = {"myfile.txt","myfile2.txt" };
		String[] actualfilecontent = {"Hey there this is my test file",
					"Root not given yet file created" };
		for(int i=0; i<2; i++) {
			Echo pop = new Echo(test[i], mockJS.getMockLocation() );
			pop.execute();
			String[] output;
			try {
				output = Echo.testHelper(test1[i],mockJS.getRootDir());
				assertEquals(output[0],actualfilename[i]);
				assertEquals(output[1],actualfilecontent[i]);
			} catch (PathIncorrectException e) {
				fail();
			}
			
		}
	}
	@Test
	public void testEchoRelativeWithAppend() {
		String[][] test = 
			{{"Hey there this is my test file"," > rootfile.txt"},
					{"Now add this line to the previous file", " >> rootfile.txt"}};
		//
		String[][] test1 = new String[][] {{"/","rootfile.txt"},
			{"/","rootfile.txt"}};
		//
		String[] actualfilename = {"rootfile.txt","rootfile.txt" };
		String[] actualfilecontent = {"Hey there this is my test file",
					"Hey there this is my test file\n" + 
					"Now add this line to the previous file" };
		
		
		for(int i=0; i<2; i++) {
			Echo pop = new Echo(test[i], mockJS.getMockLocation() );
			pop.execute();
			String[] output;
			try {
				output = Echo.testHelper(test1[i],mockJS.getRootDir());
				assertEquals(output[0],actualfilename[i]);
				assertEquals(output[1],actualfilecontent[i]);
			} catch (PathIncorrectException e) {
				fail();
			}
		}
	}
	@Test (expected=java.lang.NullPointerException.class)
	public void testEchoErrors() throws PathIncorrectException{
		String [] test = {"No file Found","  >> /Dir_7/errorfile.txt"};
		Echo pop = new Echo(test, mockJS.getMockLocation() );
		String[] filepath = {"/","Dir_7","errorfile.txt"};
		pop.execute();
		String[] output = Echo.testHelper(filepath,mockJS.getRootDir());
	}
	
	
}
	
	
	
	
	
	
	
	