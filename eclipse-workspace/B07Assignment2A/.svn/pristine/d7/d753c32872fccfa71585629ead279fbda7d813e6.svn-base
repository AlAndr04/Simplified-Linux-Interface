package test.input;
import static org.junit.Assert.*;
import java.net.MalformedURLException;
import java.net.URISyntaxException;

import org.junit.Before;
import org.junit.Test;
import dirCommands.Cd;
import fileSystemObjects.*;



public class CdTest {
    private Cd cd;
    private MockJShell JShell;
    @Before
    public void setUp() {
        JShell = new MockJShell();
    }
    
    @Test
    public void testExecuteNoDirectory() {
        cd = new Cd("/Jeff", JShell.MockLocation);
        cd.execute();
        assertEquals(JShell.MockLocation.getRoot(),
            JShell.MockLocation.getCurrDir());
    }
    @Test
    public void testExecuteDirectoryExists() {
      cd = new Cd("/Dir_1", JShell.MockLocation);
      cd.execute();
      assertEquals("Dir_1",
          JShell.MockLocation.getCurrDir().getName());
  }
    @Test
    public void testExecuteDot() {
      cd = new Cd(".",JShell.MockLocation);
      cd.execute();

      assertEquals(JShell.MockLocation.getRoot(), 
          JShell.MockLocation.getCurrDir());
  }
    @Test
    public void testExecuteDoubleDotValid() {
      cd = new Cd("/Dir_1", JShell.MockLocation);
      cd.execute();      
      cd = new Cd("..", JShell.MockLocation);
      cd.execute();
      assertEquals(JShell.MockLocation.getRoot(), 
          JShell.MockLocation.getCurrDir());
  }
    @Test
    public void testExecuteDoubleDotInvalid() {
      cd = new Cd("..", JShell.MockLocation);
      cd.execute();
      assertEquals(JShell.MockLocation.getRoot(), 
          JShell.MockLocation.getCurrDir());
  }
    @Test
    public void testExecuteMultipleDirectories() {
      cd = new Cd("/Dir_1/Dir_1_1", JShell.MockLocation);
      cd.execute();
      String actualOutput = "Dir_1_1";
      assertEquals(actualOutput, JShell.MockLocation.getCurrDir().getName());
  }
    @Test
    public void testExecuteCdIntoFile() {
      cd = new Cd("/Dir_1/file_1_1", JShell.MockLocation);
      cd.execute();
      assertEquals(JShell.MockLocation.getRoot(), 
          JShell.MockLocation.getCurrDir());
  }
    @Test
    public void testExecuteMultipleCds() {
      cd = new Cd("/Dir_1", JShell.MockLocation);
      cd.execute();
      cd = new Cd("/Dir_1/Dir_1_1", JShell.MockLocation);
      cd.execute();
      assertEquals("Dir_1_1", JShell.MockLocation.getCurrDir().getName());
  }   
}
