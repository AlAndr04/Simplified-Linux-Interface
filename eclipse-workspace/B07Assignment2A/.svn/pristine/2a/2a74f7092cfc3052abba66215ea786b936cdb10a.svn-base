package test;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import dirCommands.Traverse;
import fileCommands.Mkfile;
import fileSystemObjects.File;
import input.InvalidNameException;
import input.PathIncorrectException;
import input.UniqueNameException;

public class MkfileTest {
  private MockJShell mockJS;
  @Before
  public void setUp() throws Exception {
    mockJS = new MockJShell();
  }
  @Test
  public void testmkFileWPathCorrectInput() throws PathIncorrectException, 
  UniqueNameException, InvalidNameException {
    String[] newArr = {"/","Dir_1"};
    String[] testNewArr = {"/","Dir_1","newFile"};
    Mkfile newMkfile = new Mkfile(newArr, mockJS.getMockLocation().getRoot());
    File newfile = newMkfile.mkFileWPath("newFile");
    assertEquals(Traverse.returnGivenPathFromRootFile(testNewArr, 
    mockJS.getMockLocation().getRoot()), newfile);
  }
  @Test(expected =  InvalidNameException.class)
  public void testmkFileWPathInvalidNameSpecialCharacters() 
      throws PathIncorrectException, 
  UniqueNameException, InvalidNameException {
    String[] newArr = {"/","Dir_1"};
    Mkfile newMkfile = new Mkfile(newArr, mockJS.getMockLocation().getRoot());
    newMkfile.mkFileWPath("new_File");
  }
  @Test(expected =  UniqueNameException.class)
  public void testmkFileWPathInvalidNameUnique() throws PathIncorrectException, 
  UniqueNameException, InvalidNameException {
    String[] newArr = {"/"};
    Mkfile newMkfile = new Mkfile(newArr, mockJS.getMockLocation().getRoot());
    newMkfile.mkFileWPath("file");
    mockJS.makeFolderWithSameName();
  }
  @Test(expected = PathIncorrectException.class)
  public void testmkFileWIncorrectPath() throws PathIncorrectException, 
  UniqueNameException, InvalidNameException {
    String[] newArr = {"/a/b"};
    Mkfile newMkfile = new Mkfile(newArr, mockJS.getMockLocation().getRoot());
    newMkfile.mkFileWPath("file");
  }
}
